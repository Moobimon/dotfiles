#!/bin/sh

# TODO:
# - Make all the backup shit configurable
# - Just improve logic and design, such as make the options definable in one
#   place only.
# - Define a signle function to deal with all xdg_config_dir type of configs

SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd )"

bootstrap_options=("nvim" "vim" "polybar" "fonts" "compton" "bash" "zsh" "i3" "i3blocks" "x" "termite" "wallpaper" "mpd" "gtk")
special_options=("all" "usage")
options=("${special_options[@]}" "${bootstrap_options[@]}")
initial_params="$@"

# Usage: in_list <string> <strings>
in_list() {
  for item in "${@:2}"
  do
    if [[ "$item" == "$1" ]]; then
      return 0
    fi
  done
  return 1
}

bootstrap_nvim() {
  mkdir -p $HOME/.config/nvim
  ln -s $HOME/.vimrc $HOME/.config/nvim/init.vim
  curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  echo "done bootstraping nvim"

  bootstrap_vim
}

bootstrap_vim() {
  echo "source $SCRIPTPATH/vim/main.vim" > $SCRIPTPATH/vim/.vimrc
  cp -b $SCRIPTPATH/vim/.vimrc ~
  echo "done bootstraping vim"
}

bootstrap_polybar() {
  mkdir -p ~/.config/polybar
  cp -b $SCRIPTPATH/polybar/* ~/.config/polybar/
  echo "done bootstraping polybar"
}

bootstrap_fonts() {
  if [[ $EUID -ne 0 ]]; then
    echo "Bootstraping fonts requires running as root"
    return
  fi

  cp -b $SCRIPTPATH/fonts/TTF/* /usr/share/fonts/TTF/
  echo "done bootstraping fonts"
}

bootstrap_compton() {
  if [[ $EUID -ne 0 ]]; then
    echo "Bootstraping compton requires running as root"
    return
  fi

  cp -b $SCRIPTPATH/compton/compton.conf /etc/xdg/
  echo "done bootstraping compton"
}

bootstrap_bash() {
  cp -b $SCRIPTPATH/bash/.bash* ~
  echo "done bootstraping bash"
}

bootstrap_zsh() {
  cp -b $SCRIPTPATH/zsh/.z* ~
  echo "done bootstraping zsh"
}

bootstrap_i3() {
  mkdir -p ~/.config/i3
  cp -b $SCRIPTPATH/i3/* ~/.config/i3/
  echo "done bootstraping i3"
}

bootstrap_i3blocks() {
  mkdir -p ~/.config/i3blocks
  cp -b $SCRIPTPATH/i3blocks/* ~/.config/i3blocks/
  echo "done bootstraping i3blocks"
}

bootstrap_x() {
  mkdir -p ~/.config
  mkdir -p ~/.xdg
  cp -b $SCRIPTPATH/x/.xinitrc ~
  cp -b $SCRIPTPATH/x/user-dirs.dirs ~/.config
  echo "done bootstraping x"
}

bootstrap_termite() {
  mkdir -p ~/.config/termite
  cp -b $SCRIPTPATH/termite/* ~/.config/termite/
  echo "done bootstraping termite"
}

bootstrap_wallpaper() {
  cat > $SCRIPTPATH/wallpapers/.fehbg <<- EOM
#!/bin/sh
'feh' '--bg-scale' '$SCRIPTPATH/wallpapers/wallpaper'
EOM
  chmod +x $SCRIPTPATH/wallpapers/.fehbg
  cp -b $SCRIPTPATH/wallpapers/.fehbg ~
  echo "done bootstraping wallpaper"
}

bootstrap_mpd() {
  mkdir -p ~/.config/mpd
  cp -b $SCRIPTPATH/mpd/mpd.conf ~/.config/mpd/
  echo "done bootstraping mpd"
}

bootstrap_gtk() {
  mkdir -p ~/.config/gtk-3.0
  cp -b $SCRIPTPATH/gtk/gtk.css ~/.config/gtk-3.0
  echo "done bootstraping gtk"
}

bootstrap_by_param() {
  case "$1" in
    "nvim") bootstrap_nvim;;
    "vim") bootstrap_vim;;
    "polybar") bootstrap_polybar;;
    "fonts") bootstrap_fonts;;
    "compton") bootstrap_compton;;
    "bash") bootstrap_bash;;
    "zsh") bootstrap_zsh;;
    "i3") bootstrap_i3;;
    "i3blocks") bootstrap_i3blocks;;
    "x") bootstrap_x;;
    "termite") bootstrap_termite;;
    "wallpaper") bootstrap_wallpaper;;
    "mpd") bootstrap_mpd;;
    "gtk") bootstrap_gtk;;
  esac
}

bootstrap_by_params() {
  for param do
    bootstrap_by_param "$param";
  done
}

print_usage() {
  ( IFS='|'; echo "usage: ./bootstrap.sh all | ./bootstrap.sh usage | ./bootstrap.sh ${bootstrap_options[*]}" )
}

exit_invalid_usage() {
  echo "invalid arguments: $initial_params"
  print_usage
  exit 1
}

validate_params() {
  for param do
    if ! in_list "$param" "${options[@]}"; then
      exit_invalid_usage
    fi;
  done
}

validate_special_params() {
  for param do
    if in_list "$param" "${special_options[@]}"; then
      found_special=true
    fi;
  done

  if [ \( "$#" -gt 1 \) -a \( "$found_special" = true \) ]; then
    exit_invalid_usage
  fi
}

handle_special_params() {
  validate_special_params "$@"

  case "$1" in
    "all")
      bootstrap_by_params "${bootstrap_options[@]}"
      exit 0;;
    "usage")
      print_usage
      exit 0;;
  esac
}

main() {
  validate_params "$@"

  handle_special_params "$@"

  bootstrap_by_params "$@"
}

main $@
